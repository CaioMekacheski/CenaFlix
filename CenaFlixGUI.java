
package view;

import data.Filmes;
import data.FilmesDao;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.List;


/**
 * Cria a interface gráfica do sistema 
 * @author caiocesar
 */
public class CenaFlixGUI extends javax.swing.JFrame 
{
    public CenaFlixGUI() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        panelLogo = new javax.swing.JPanel();
        labelLogo = new javax.swing.JLabel();
        labelNome = new javax.swing.JLabel();
        labelDataLancamento = new javax.swing.JLabel();
        labelCategoria = new javax.swing.JLabel();
        campoNome = new javax.swing.JTextField();
        campoDataLancamento = new javax.swing.JTextField();
        campoCategoria = new javax.swing.JTextField();
        btnCadastrar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFilmes = new javax.swing.JTable();
        campoPesquisa = new javax.swing.JTextField();
        btnExcluir = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        labelNome1 = new javax.swing.JLabel();
        chbxCategoria = new javax.swing.JCheckBox();
        chbxID = new javax.swing.JCheckBox();
        chbxTitulo = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setBackground(new java.awt.Color(255, 255, 255));
        jInternalFrame1.setForeground(new java.awt.Color(0, 0, 0));
        jInternalFrame1.setPreferredSize(new java.awt.Dimension(800, 600));
        jInternalFrame1.setVisible(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Cadastro de filmes");

        panelLogo.setBackground(new java.awt.Color(102, 0, 0));

        labelLogo.setBackground(new java.awt.Color(153, 153, 153));
        labelLogo.setFont(new java.awt.Font("Liberation Sans", 1, 48)); // NOI18N
        labelLogo.setForeground(new java.awt.Color(255, 255, 255));
        labelLogo.setText("CenaFlix");

        javax.swing.GroupLayout panelLogoLayout = new javax.swing.GroupLayout(panelLogo);
        panelLogo.setLayout(panelLogoLayout);
        panelLogoLayout.setHorizontalGroup(
            panelLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLogoLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(labelLogo)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        panelLogoLayout.setVerticalGroup(
            panelLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLogoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelLogo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        labelNome.setBackground(new java.awt.Color(255, 255, 255));
        labelNome.setForeground(new java.awt.Color(0, 0, 0));
        labelNome.setText("Nome do filme: ");

        labelDataLancamento.setBackground(new java.awt.Color(255, 255, 255));
        labelDataLancamento.setForeground(new java.awt.Color(0, 0, 0));
        labelDataLancamento.setText("Data de lançamento:");

        labelCategoria.setBackground(new java.awt.Color(255, 255, 255));
        labelCategoria.setForeground(new java.awt.Color(0, 0, 0));
        labelCategoria.setText("Categoria: ");

        campoNome.setBackground(new java.awt.Color(102, 0, 0));
        campoNome.setForeground(new java.awt.Color(255, 255, 255));
        campoNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNomeActionPerformed(evt);
            }
        });

        campoDataLancamento.setBackground(new java.awt.Color(102, 0, 0));
        campoDataLancamento.setForeground(new java.awt.Color(255, 255, 255));
        campoDataLancamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoDataLancamentoActionPerformed(evt);
            }
        });

        campoCategoria.setBackground(new java.awt.Color(102, 0, 0));
        campoCategoria.setForeground(new java.awt.Color(255, 255, 255));
        campoCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoCategoriaActionPerformed(evt);
            }
        });

        btnCadastrar.setBackground(new java.awt.Color(102, 0, 0));
        btnCadastrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCadastrar.setText("Cadastrar");
        btnCadastrar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnLimpar.setBackground(new java.awt.Color(102, 0, 0));
        btnLimpar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpar.setText("Limpar");
        btnLimpar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnPesquisar.setBackground(new java.awt.Color(102, 0, 0));
        btnPesquisar.setForeground(new java.awt.Color(255, 255, 255));
        btnPesquisar.setText("Pesquisar");
        btnPesquisar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        //Modelo da tabela
        String[] colunas = {"ID", "Título", "Data de Lançamento", "Categoria"};
        DefaultTableModel modelo = new DefaultTableModel(colunas, 0);
        //Cria a conexão
        FilmesDao dao = new FilmesDao();
        boolean status = dao.conectar();

        List<Filmes> lista = dao.listarFilmes();

        System.out.println(lista.size());
        for(int i = 0; i < lista.size(); i++)
        {
            Filmes filme = lista.get(i);

            System.out.println(filme.getNome());
            String[] linha =
            {
                String.valueOf(filme.getId()),
                filme.getNome(),
                filme.getDataLancamento(),
                filme.getCategoria()
            };
            modelo.addRow(linha);

        }
        dao.desconectar();
        tblFilmes.setModel(modelo);
        jScrollPane1.setViewportView(tblFilmes);

        campoPesquisa.setBackground(new java.awt.Color(102, 0, 0));
        campoPesquisa.setForeground(new java.awt.Color(255, 255, 255));
        campoPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoPesquisaActionPerformed(evt);
            }
        });

        btnExcluir.setBackground(new java.awt.Color(102, 0, 0));
        btnExcluir.setForeground(new java.awt.Color(255, 255, 255));
        btnExcluir.setText("Excluir");
        btnExcluir.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnAtualizar.setBackground(new java.awt.Color(102, 0, 0));
        btnAtualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnAtualizar.setText("Atualizar");
        btnAtualizar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        labelNome1.setBackground(new java.awt.Color(255, 255, 255));
        labelNome1.setForeground(new java.awt.Color(0, 0, 0));
        labelNome1.setText("Selecione um item na lista para atualiza ou excluir");

        chbxCategoria.setBackground(new java.awt.Color(255, 255, 255));
        chbxCategoria.setForeground(new java.awt.Color(0, 0, 0));
        chbxCategoria.setText("Categoria");
        chbxCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbxCategoriaActionPerformed(evt);
            }
        });

        chbxID.setBackground(new java.awt.Color(255, 255, 255));
        chbxID.setForeground(new java.awt.Color(0, 0, 0));
        chbxID.setText("ID");
        chbxID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbxIDActionPerformed(evt);
            }
        });

        chbxTitulo.setBackground(new java.awt.Color(255, 255, 255));
        chbxTitulo.setForeground(new java.awt.Color(0, 0, 0));
        chbxTitulo.setText("Título");
        chbxTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbxTituloActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelNome)
                                .addGap(132, 132, 132)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(campoCategoria, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                                            .addComponent(campoDataLancamento))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnCadastrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnAtualizar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(campoNome))
                                .addGap(24, 24, 24))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(146, 146, 146)
                                .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(93, 93, 93))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(panelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(chbxID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chbxTitulo)
                                .addGap(67, 67, 67)
                                .addComponent(chbxCategoria))
                            .addComponent(campoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(18, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(labelDataLancamento)
                            .addComponent(labelCategoria)
                            .addComponent(labelNome1))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(49, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(89, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(campoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chbxTitulo)
                            .addComponent(chbxCategoria)
                            .addComponent(chbxID)))
                    .addComponent(panelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNome)
                    .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDataLancamento)
                    .addComponent(campoDataLancamento, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelNome1)
                .addGap(233, 233, 233)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(292, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(101, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void campoNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNomeActionPerformed

    private void campoDataLancamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoDataLancamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoDataLancamentoActionPerformed

    private void campoCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoCategoriaActionPerformed
    
    //Botão Cadastrar
    /**
    * Cadastra um novo filme
    * @author caiocesar
    */
    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        //Verifica se todos os campos foram preenchidos
        if(campoNome.getText().isEmpty() || campoDataLancamento.getText().isEmpty() || campoCategoria.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "\nPreencha todos os campos");
        }
        else
        {
            //Cria um objeto Filmes e um Objeto FilmesDao
            Filmes filme = new Filmes();
            FilmesDao dao = new FilmesDao();
            boolean status;
            int resposta;           
            //Atribui os dados preenchidos ao objeto filme
            filme.setNome(campoNome.getText());
            filme.setDataLancamento(formataData(campoDataLancamento.getText()));
            filme.setCategoria(campoCategoria.getText());
            //Conecta ao banco de dados
            status = dao.conectar();

            if(!status)
            {
                    JOptionPane.showMessageDialog(null,"Erro de conexão");
            }
            else
            {       //Salva os dados e reseta os valores
                    resposta = dao.salvar(filme);
                    if(resposta == 1)
                    {
                        JOptionPane.showMessageDialog
                            (null,"Filme cadastrado com sucesso");
                        campoNome.setText("");
                        campoDataLancamento.setText("");
                        campoCategoria.setText("");
                        campoNome.requestFocus();
                    
                    }
                    else if(resposta == 1062)
                    {
                        JOptionPane.showMessageDialog
                            (null,"O Filme já foi cadastrado");
                    }
                    else
                    {
                        JOptionPane.showMessageDialog
                            (null,"Erro ao tentar inserir dados");
                    }
            }
            //Atualiza a lista e desconecta
            atualizarLista();
            dao.desconectar();
        }
    }//GEN-LAST:event_btnCadastrarActionPerformed
    
    /**
    * Pesquisa um filme de acordo com o filtro selecionado  
    * @author caiocesar
    */
    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        //Verifica se o campo pesquisa foi preenchido
        if(campoPesquisa.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "\nInsira o nome, ID ou Categoria do filme");
        }
        else
        {
            //Salva a pesquisa digitada em nome e cria a conexão
            String pesquisa = campoPesquisa.getText();
            FilmesDao dao = new FilmesDao();
            boolean status = dao.conectar();
            
            boolean filtroCategoria = chbxCategoria.isSelected();
            boolean filtroTitulo = chbxTitulo.isSelected();
            boolean filtroID = chbxID.isSelected();
            
            String[] colunas = {"ID", "Título", "Data de Lançamento", "Categoria"};
            DefaultTableModel modelo = new DefaultTableModel(colunas, 0);
            
            if(status)
            {   
                //Se o filtro por categoria estiver marcado
                if(filtroCategoria)
                {   
                    //Lista os filmes de acordo com a categoria inserida
                    List<Filmes> filme = dao.listarCategoria(pesquisa);
                    if(filme == null)
                    {
                        JOptionPane.showMessageDialog(null, "Categoria não cadastrada");
                    }
                    
                    for(int i = 0; i < filme.size(); i++)
                    {
                        String[] linhas = {
                                                String.valueOf(filme.get(i).getId()), 
                                                filme.get(i).getNome(), 
                                                filme.get(i).getDataLancamento(), 
                                                filme.get(i).getCategoria()
                                          };  
                        modelo.addRow(linhas);
                    }
                }
                else if(filtroTitulo)
                {
                    //Lista os filmes de acordo com o titulo inserido
                    List<Filmes> filme = dao.listarTitulo(pesquisa);
                    if(filme == null)
                    {
                        JOptionPane.showMessageDialog(null, "Título não cadastrado");
                    }
                    
                    for(int i = 0; i < filme.size(); i++)
                    {
                        String[] linhas = {
                                                String.valueOf(filme.get(i).getId()), 
                                                filme.get(i).getNome(), 
                                                filme.get(i).getDataLancamento(), 
                                                filme.get(i).getCategoria()
                                          };  
                        modelo.addRow(linhas);
                    }
                }
                else if(filtroID)
                {
                    //Lista os filmes de acordo com o ID inserido
                    List<Filmes> filme = dao.listarID(pesquisa);
                    
                    if(filme.isEmpty())
                    {
                        JOptionPane.showMessageDialog(null, "ID não cadastrado");
                    }
                    
                    for(int i = 0; i < filme.size(); i++)
                    {
                        String[] linhas = {
                                                String.valueOf(filme.get(i).getId()), 
                                                filme.get(i).getNome(), 
                                                filme.get(i).getDataLancamento(), 
                                                filme.get(i).getCategoria()
                                          };  
                        modelo.addRow(linhas);
                    }
                }
                //Limpa o campo de pesquisa e posiciona o cursor para uma nova pesquisa
                campoPesquisa.setText("");
                campoPesquisa.requestFocus();
                tblFilmes.setModel(modelo);
                dao.desconectar();
                
            }
            else 
            {
                JOptionPane.showMessageDialog
                            (null,"Erro de conexão");
            }
            dao.desconectar();
            
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed
    //Botão Limpar
    /**
    * Limpa os campos de cadastro e atualiza a lista de filmes 
    * @author caiocesar
    */
    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        atualizarLista();
        campoNome.setText("");
        campoDataLancamento.setText("");
        campoCategoria.setText("");
    }//GEN-LAST:event_btnLimparActionPerformed

    private void campoPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoPesquisaActionPerformed
    //Botão excluir
    /**
    * Exclui um item e atualiza a lista  
    * @author caiocesar
    */
    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int pos = tblFilmes.getSelectedRow();
        FilmesDao dao = new FilmesDao();
        
        if(!dao.conectar())
        {
            
        }
        else
        {
            if(pos == -1)
            {
                JOptionPane.showMessageDialog(rootPane, "Selecione uma filme na lista");
            }
            if(pos >= 0)
            {
                String[] options = { "Sim", "Não" };

                int deletar = JOptionPane.showOptionDialog
                (
                    rootPane,
                    "Tem certeza que deseja excluir?", 
                     "Exclusão de consulta", 
                     JOptionPane.DEFAULT_OPTION, 
                     JOptionPane.QUESTION_MESSAGE, 
                     null, 
                     options, 
                     options[0]
                );
                if(deletar == 0)
                {
                    dao.excluir(dao.listarFilmes().get(pos).getId());
                    atualizarLista();
                }
            }
        }        
    }//GEN-LAST:event_btnExcluirActionPerformed
    
    //Atualizar
    /**
    * Atualiza um item selecionado de acordo com os campos preenchidos  
    * @author caiocesar
    */
    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        //Cria os objetos Filmes e FilmesDao
        Filmes filme = new Filmes();
        FilmesDao dao = new FilmesDao();
        if(!dao.conectar())
        {
            JOptionPane.showMessageDialog(null,"Erro de conexão");
        }
        else
        {   
            //Pega o item selecionado da lista
            int pos = tblFilmes.getSelectedRow();
            
            //Verifica se há uma seleção na lista
            if(pos == -1)
            {
                JOptionPane.showMessageDialog
                    (rootPane, "Selecione uma filme na lista para atualizar os dados");
            }
            //Se houver, registra o id selecionado
            if(pos >= 0)
            {

                int id = dao.listarFilmes().get(pos).getId();
                int resposta;

                filme.setId(id);
                //Checa se ao menos um campo está preenchido
                if(campoNome.getText().isEmpty() && 
                        campoDataLancamento.getText().isEmpty() && campoCategoria.getText().isEmpty())
                {
                    
                    JOptionPane.showMessageDialog
                        (rootPane, "Preencha ao menos um campo para atualizar");
                }
                else
                {
                
                    //Se ao menos um campo estiver preenchido, atualiza os valores inseridos, e mantem os 
                    //que não foram preenchidos
                    if(!campoNome.getText().isEmpty())
                    {
                        filme.setNome(campoNome.getText());
                        filme.setDataLancamento(dao.listarFilmes().get(pos).getDataLancamento());
                        filme.setCategoria(dao.listarFilmes().get(pos).getCategoria());
                    }

                    if(!campoDataLancamento.getText().isEmpty())
                    {
                        filme.setNome(dao.listarFilmes().get(pos).getNome());
                        filme.setDataLancamento(campoDataLancamento.getText());
                        filme.setCategoria(dao.listarFilmes().get(pos).getCategoria());
                    }

                    if(!campoCategoria.getText().isEmpty())
                    {
                        filme.setNome(dao.listarFilmes().get(pos).getNome());
                        filme.setDataLancamento(dao.listarFilmes().get(pos).getDataLancamento());
                        filme.setCategoria(campoCategoria.getText());
                    }
                    
                    
                    {
                        //Atualiza os dados e checa se a atualização foi realizada
                        resposta = dao.atualizar(filme);

                        if(resposta == 1)
                        {
                            JOptionPane.showMessageDialog(null,"Dados atualizados com sucesso");
                            campoNome.setText("");
                            campoDataLancamento.setText("");
                            campoCategoria.setText("");
                            campoNome.requestFocus();
                            atualizarLista();
                        }
                        else if(resposta == 1062)
                        {
                            JOptionPane.showMessageDialog(null,"Filme já cadastrado");   
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null,"Erro ao tentar inserir dados");
                        }
                    }
                }    
            }
            dao.desconectar();
        }
    }//GEN-LAST:event_btnAtualizarActionPerformed
    //Métodos para garantir que somente um filtro esteja selecionado
    private void chbxCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbxCategoriaActionPerformed
        if(chbxCategoria.isSelected())
        {
            if(chbxTitulo.isSelected())
            {
                chbxTitulo.setSelected(false);
            }
            if(chbxID.isSelected())
            {
                chbxID.setSelected(false);
            }
            campoPesquisa.requestFocus();
        }
    }//GEN-LAST:event_chbxCategoriaActionPerformed

    private void chbxTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbxTituloActionPerformed
    if(chbxTitulo.isSelected())
            {
                if(chbxCategoria.isSelected())
                {
                    chbxCategoria.setSelected(false);
                }
                if(chbxID.isSelected())
                {
                    chbxID.setSelected(false);
                }
                campoPesquisa.requestFocus();
            }
    }//GEN-LAST:event_chbxTituloActionPerformed

    private void chbxIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbxIDActionPerformed
        if(chbxID.isSelected())
            {
                if(chbxCategoria.isSelected())
                {
                    chbxCategoria.setSelected(false);
                }
                if(chbxTitulo.isSelected())
                {
                    chbxTitulo.setSelected(false);
                }
                campoPesquisa.requestFocus();
            }
    }//GEN-LAST:event_chbxIDActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JTextField campoCategoria;
    private javax.swing.JTextField campoDataLancamento;
    private javax.swing.JTextField campoNome;
    private javax.swing.JTextField campoPesquisa;
    private javax.swing.JCheckBox chbxCategoria;
    private javax.swing.JCheckBox chbxID;
    private javax.swing.JCheckBox chbxTitulo;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCategoria;
    private javax.swing.JLabel labelDataLancamento;
    private javax.swing.JLabel labelLogo;
    private javax.swing.JLabel labelNome;
    private javax.swing.JLabel labelNome1;
    private javax.swing.JPanel panelLogo;
    private javax.swing.JTable tblFilmes;
    // End of variables declaration//GEN-END:variables
    
    //Checa se a data está no formato dd/mm/aaaa
    public boolean checaData(String data)
    {
        if(data.matches("[0-9]{2}[/][0-9]{2}[/][0-9]{4}"))
        {
            return true;
        }
        else 
        {
            
            return false;
        }
    }
    //Divide e inverte a data
    public String formataData(String data)
    {   
        String novaData = "";
        boolean dataValida = checaData(data);
        
        if(dataValida)
        {
            
            String[] split = data.split("/");
            novaData = split[2] + "-" + split[1] + "-" + split[0];            
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Data no formato incorreto. Tente: dd/mm/aaaa");
        }
        
        return novaData;
        
    }
    /**
    *@Atualiza lista
    */ 
    public void atualizarLista()
    {
        //Modelo da tabela
        String[] colunas = {"ID", "Título", "Data de Lançamento", "Categoria"};
        DefaultTableModel modelo = new DefaultTableModel(colunas, 0);
        //Cria a conexão
        FilmesDao dao = new FilmesDao();
        boolean status = dao.conectar();
        
        if(!status)
        {
            JOptionPane.showMessageDialog(null,"Falha de conexão");
        }
        else
        {
            List<Filmes> lista = dao.listarFilmes();

            System.out.println(lista.size());


                    if(!dao.listarFilmes().isEmpty())
                    {
                        for(int i = 0; i < lista.size(); i++)
                        {
                            Filmes filme = lista.get(i);

                            System.out.println(filme.getNome());
                                String[] linha =
                                {
                                    String.valueOf(filme.getId()),
                                    filme.getNome(),
                                    filme.getDataLancamento(),
                                    filme.getCategoria()
                                };
                            modelo.addRow(linha);
                            dao.desconectar();
                            tblFilmes.setModel(modelo);

                        }
                        CenaFlixGUI principal = new CenaFlixGUI();
                        principal.setVisible(true);

                        dispose();
                    }
        }
    }
}
